# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: staging-server-deployment-to-azure-app-service

on:
  push:
    branches:
      - dev_server
  workflow_dispatch:
  
defaults:
  run:
    working-directory: Server
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      - name: npm install, build, and test
        run: |
          npm install
          npm install pm2@latest
          npm run build --if-present
          npm run test --if-present
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'technoob-staging'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_1ED0C7AB1FD14BCEBAE4D5C3C50431DF }}
          package: .
      
      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create SSH tunnel to web app
        run: |
          # Start the SSH tunnel in the background
          az webapp ssh -g Technoob -n technoob-staging --timeout 300 &
          # Wait for the tunnel to become available
          sleep 10
        # Use the `shell: bash` syntax to run the following steps in a bash shell
        shell: bash
        # Use the `continue-on-error: true` flag to prevent the job from failing if the `expect` command fails
        continue-on-error: true
        steps:
        # Install the `expect` package
        - name: Install expect
          run: sudo apt-get update && sudo apt-get install expect -y
        # Use `expect` to send the `cd` and `node` commands to the loaded shell through the SSH tunnel
        - name: Run command on web app terminal
          run: |
            expect -c '
              # Set up the SSH connection parameters
              set timeout 5
              set host "localhost"
              set port "33333"
              set user "root"
              set password "your_password_here"
              # Connect to the SSH tunnel
              spawn ssh -o "StrictHostKeyChecking no" -p $port $user@$host
              expect "*assword:*"
              send "$password\r"
              # Wait for the shell prompt to appear
              expect "$ "
              # Send the `cd` and `node` commands to the shell
              send "cd /home/site/wwwroot/Server\r"
              expect "$ "
              send "node ./azure_Queue/worker.js\r"
              expect "$ "
              # Exit the shell
              send "exit\r"
              expect eof
          '


